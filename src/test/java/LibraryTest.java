/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.is;


public class LibraryTest {

    //Null - [Null] -> false
    @Test
    void removeShortWordsRemovesNullElement() {
        //Setup
        final List<String> words = Collections.singletonList(null);

        //Exercise
        final List<String> actual = words
                .stream()
                .filter(Library::removeShortWords)
                .collect(Collectors.toList());

        //Assert
        assertThat(actual.isEmpty(), is(true));

        //Teardown
    }

    @Test
    void removeShortWordsReturnsTrueFor() {
        //Setup
        final List<String> words = Collections.singletonList("aaaaa");

        //Exercise
        final List<String> actual = words
                .stream()
                .filter(Library::removeShortWords)
                .collect(Collectors.toList());

        //Assert
        assertThat(actual.isEmpty(), is(false));

        //Teardown
    }

    @Test
    void removeShortWordsRemovesAllBs() {
        //Setup
        final List<String> words = Arrays.asList("bbbbb","bbb");

        //Exercise
        final List<String> actual = words
                .stream()
                .filter(Library::removeShortWords)
                .collect(Collectors.toList());

        //Assert
        assertThat(actual.isEmpty(), is(false));

        //Teardown
    }
    @Test
    void removeShortWordsRemovesOneAndKeeps() {
        //Setup
        final List<String> words = Arrays.asList("cccc","ccccc");

        //Exercise
        final List<String> actual = words
                .stream()
                .filter(Library::removeShortWords)
                .collect(Collectors.toList());

        //Assert
        assertThat(actual, contains("ccccc"));

        //Teardown
    }
}
